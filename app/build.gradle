apply plugin: 'com.android.application'



ext.appReleaseDir = ""
//ext.IS_JENKINS = false

def loadProperties() {
    def proFile = file("../local.properties")
    Properties p = new Properties()
    proFile.withInputStream { stream->
        p.load(stream)
    }
    appReleaseDir = p.appReleaseDir
//    IS_JENKINS = p.IS_JENKINS
//    appVersionCode = Integer.valueOf(p.appVersionCode)
//    appVersionName = p.appVersionName
}

loadProperties()

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.newland.voiceprovider"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }


        println("APP_OUT_PATH pre: " + APP_BUILD_PATH)
        println("IS_JENKINS pre: " + IS_JENKINS)

        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->

                println("APP_OUT_PATH : " + APP_BUILD_PATH)
                println("IS_JENKINS : " + IS_JENKINS)
                def outputFile = output.outputFile
                if (outputFile != null) {
                    def releaseApkName = 'voiceprovide_';
                    if (outputFile.name.endsWith("release.apk")) {
                        releaseApkName = releaseApkName + "Release_V"
                    } else if (outputFile.name.endsWith("debug.apk")) {
                        releaseApkName = releaseApkName + "Debug_V"
                    }
                    releaseApkName = releaseApkName + variant.getVersionName() + '_' + getDate() + '.apk';
//                    output.outputFile = new File(outputFile.parent, releaseApkName)
                    if("true".equalsIgnoreCase(IS_JENKINS)){
//                        output.outputFile = new File(appReleaseDir, releaseApkName)
                        println("in sucess outputFileName :" + outputFileName)
                        output.outputFile = new File(APP_BUILD_PATH, releaseApkName)
                    }else {
                        println("in fail outputFileName :")
                        output.outputFile = new File(outputFile.parent, releaseApkName)
                    }
                }
            }
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/java']
        }
    }

    println("APP_OUT_PATH end: " + APP_BUILD_PATH)
    println("IS_JENKINS end: " + IS_JENKINS)
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.2.0'
    testCompile 'junit:junit:4.12'
}
